{
    "mode": "router",

    "metadata":{
        "name": "VM Zenoh Router",
        "location": "Poznan"
    },

    /// specify endpoints to connect, other routers/peers
    "connect": {
        "endpoints": [] 
    },

    /// specify on which enpoint can other routers, client and peers can connect 
    "listen": {
        "endpoints": ["tcp/[::]:7447"]
    },

    /// scouting mechanism
    "scouting": {
        "timeout": 3000,
        "delay": 200,
        "multicast": {
            /// Whether multicast scouting is enabled or not
            "enabled": false,
            /// The socket which should be used for multicast scouting
            "address": "224.0.0.224:7446",
            /// The network interface which should be used for multicast scouting
            "interface": "auto",
            "autoconnect": { router: "", peer: "router|peer" },
            /// Whether or not to listen for scout messages on UDP multicast and reply to them.
            "listen": false
        },
        "gossip": {
            "enabled": false,
            "multihop": false,
            "autoconnect": null
        }
    },
    timestamping: {
        enabled: { router: true, peer: false, client: false },
        drop_future_timestamp: false,
    },
    queries_default_timeout: 10000,
    /// The routing strategy to use and it's configuration.
    routing: {
        /// The routing strategy to use in routers and it's configuration.
        router: {
        /// When set to true a router will forward data between two peers
        /// directly connected to it if it detects that those peers are not
        /// connected to each other.
        /// The failover brokering only works if gossip discovery is enabled.
        peers_failover_brokering: true,
        },
        /// The routing strategy to use in peers and it's configuration.
        peer: {
            /// The routing strategy to use in peers. ("peer_to_peer" or "linkstate").
            mode: "peer_to_peer",
        }
    },
    "aggregation": {
        "subscribers": [],
        "publishers": []
    },
    /// Configure internal transport parameters
    "transport": {
        "unicast": {
            "accept_timeout": 10000,
            "accept_pending": 100,
            "max_sessions": 1000,
            "max_links": 1,
            "lowlatency": false,
        },    
        "link": {
            /// An optional whitelist of protocols to be used for accepting and opening sessions.
            /// If not configured, all the supported protocols are automatically whitelisted.
            /// The supported protocols are: ["tcp" , "udp", "tls", "quic", "ws", "unixsock-stream"]
            /// For example, to only enable "tls" and "quic":
            //   protocols: ["tls", "quic"],
            /// Configure the zenoh TX parameters of a link
            "tx": {
                /// The resolution in bits to be used for the message sequence numbers.
                /// When establishing a session with another Zenoh instance, the lowest value of the two instances will be used.
                /// Accepted values: 8bit, 16bit, 32bit, 64bit.
                "sequence_number_resolution": "32bit",
                /// Link lease duration in milliseconds to announce to other zenoh nodes
                "lease": 10000,
                /// Number of keep-alive messages in a link lease duration. If no data is sent, keep alive
                /// messages will be sent at the configured time interval.
                /// NOTE: In order to consider eventual packet loss and transmission latency and jitter,
                ///       set the actual keep_alive timeout to one fourth of the lease time.
                ///       This is in-line with the ITU-T G.8013/Y.1731 specification on continous connectivity
                ///       check which considers a link as failed when no messages are received in 3.5 times the
                ///       target interval.
                "keep_alive": 4,
                /// Batch size in bytes is expressed as a 16bit unsigned integer.
                /// Therefore, the maximum batch size is 2^16-1 (i.e. 65535).
                /// The default batch size value is the maximum batch size: 65535.
                "batch_size": 65535,
                /// Each zenoh link has a transmission queue that can be configured
                "queue": {
                    /// The size of each priority queue indicates the number of batches a given queue can contain.
                    /// The amount of memory being allocated for each queue is then SIZE_XXX * BATCH_SIZE.
                    /// In the case of the transport link MTU being smaller than the ZN_BATCH_SIZE,
                    /// then amount of memory being allocated for each queue is SIZE_XXX * LINK_MTU.
                    /// If qos is false, then only the DATA priority will be allocated.
                    "size": {
                        "control": 1,
                        "real_time": 1,
                        "interactive_high": 1,
                        "interactive_low": 1,
                        "data_high": 2,
                        "data": 4,
                        "data_low": 4,
                        "background": 4,
                    },
                    /// The initial exponential backoff time in nanoseconds to allow the batching to eventually progress.
                    /// Higher values lead to a more aggressive batching but it will introduce additional latency.
                    "backoff": 100,
                    // Number of threads dedicated to transmission
                    // By default, the number of threads is calculated as follows: 1 + ((#cores - 1) / 4)
                    // threads: 4,
                },
            },
            /// Configure the zenoh RX parameters of a link
            "rx": {
                /// Receiving buffer size in bytes for each link
                /// The default the rx_buffer_size value is the same as the default batch size: 65335.
                /// For very high throughput scenarios, the rx_buffer_size can be increased to accomodate
                /// more in-flight data. This is particularly relevant when dealing with large messages.
                /// E.g. for 16MiB rx_buffer_size set the value to: 16777216.
                "buffer_size": 65535,
                /// Maximum size of the defragmentation buffer at receiver end.
                /// Fragmented messages that are larger than the configured size will be dropped.
                /// The default value is 1GiB. This would work in most scenarios.
                /// NOTE: reduce the value if you are operating on a memory constrained device.
                "max_message_size": 1073741824,
            },
            /// Configure TLS specific parameters
            "tls": {
                /// Path to the certificate of the certificate authority used to validate either the server
                /// or the client's keys and certificates, depending on the node's mode. If not specified
                /// on router mode then the default WebPKI certificates are used instead.
                "root_ca_certificate": null,
                /// Path to the TLS server private key
                "server_private_key": null,
                /// Path to the TLS server public certificate
                "server_certificate": null,
                /// Client authentication, if true enables mTLS (mutual authentication)
                "client_auth": false,
                /// Path to the TLS client private key
                "client_private_key": null,
                /// Path to the TLS client public certificate
                "client_certificate": null,
                // Whether or not to use server name verification, if set to false zenoh will disregard the common names of the certificates when verifying servers.
                // This could be dangerous because your CA can have signed a server cert for foo.com, that's later being used to host a server at baz.com. If you wan't your
                // ca to verify that the server at baz.com is actually baz.com, let this be true (default).
                "server_name_verification": null,
            },
        },
        /// Shared memory configuration
        "shared_memory": {
            "enabled": false,
        },
        /// Access control configuration
        "auth": {
        /// The configuration of authentification.
        /// A password implies a username is required.
            "usrpwd": {
                "user": null,
                "password": null,
                /// The path to a file containing the user password dictionary
                "dictionary_file": null,
            },
            "pubkey": {
                "public_key_pem": null,
                "private_key_pem": null,
                "public_key_file": null,
                "private_key_file": null,
                "key_size": null,
                "known_keys_file": null,
            },
        },
    },

    /// Configure the Admin Space
    /// Unstable: this configuration part works as advertised, but may change in a future release
    "adminspace": {
        // read and/or write permissions on the admin space
        "permissions": {
            "read": true,
            "write": false,
        },
    },
    "plugins_search_dirs": [],
    "plugins": {
        "rest": {
            "__required__": true,
            "http_port": "8000"
        },
        "storage_manager": {
            "storages": {
                "demo": {
                    "key_expr": "demo/example/**",
                    "volume": "memory"
                },
                "agrorob": {
                    "key_expr": "agrorob/**",
                    "volume": "memory",
                    /// A complete storage advertises itself as containing all the known keys matching the configured key expression.
                    /// If not configured, complete defaults to false.
                    "complete": "false",
                }
            }
        }
    }
}
